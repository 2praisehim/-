// 전화번호 목록
/*
전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다.
전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.

구조대 : 119
박준영 : 97 674 223
지영석 : 11 9552 4421

전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때,
어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.
*/
// 2021-07-27

// <내 풀이>
#include <string>
#include <vector>

using namespace std;

bool solution(vector<string> phone_book) {
    bool answer = true;
    int cnt = 0;
    
    for(int i = 0; i < phone_book.size(); i++) { // i : 전체 전화번호부 개수만큼 돌림
        for(int j = i + 1; j < phone_book.size(); j++) { // j : 첫번째 기준으로 나머지 비교
            cnt = 0;
            for(int k = 0; k < phone_book[i].size(); k++) { // 전화번호부 하나씩 비교
                if(phone_book[i][k] == phone_book[j][k])
                    cnt++;
                
                if(k == phone_book[i].size() - 1 && cnt == phone_book[i].size())
                    answer = false;
            }
        }
    }
    return answer;
}

// <다른 풀이>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

bool solution(vector<string> phone_book) {
  sort(phone_book.begin(), phone_book.end());
  
  for(int i = 0; i < phone_book.size() - 1; i++)
  {
    if(phone_book[i] == phone_book[i+1].substr(0, phone_book[i].size()))
      return false;
  }
  return true;
}

/* <느낀 점>
삼중 포문을 사용하여 전화번호부의 크기가 큰 경우에서 시간 초과 에러가 발생하였다.
다른 풀이를 찾아보니 정렬을 통해 사전 순으로 배치하여 인접 원소만 비교하여 시간 단축을 했다.
이중 포문을 이용하여 캐릭터별 하나씩 비교하면 시간이 오래걸리니까 스트링 비교에 익숙해져야 할 것 같고 다음엔 해시 풀이도 해보겠다.
*/
